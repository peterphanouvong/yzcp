{"version":3,"sources":["shared\\typography.scss","utils\\mixins.scss","utils\\vendors.scss","base\\reset.scss","base\\base.scss","..\\node_modules\\include-media\\dist\\_include-media.scss","pages\\home.scss","utils\\variables.scss","pages\\album.scss","partials\\preloader.scss"],"names":[],"mappings":"AAAQ,qFAAA;ACAR;EACE,YAAA;EACA,OAAA;EACA,iBAAA;EACA,kBAAA;EACA,MAAA;EACA,WAAA;;;ACNF;EACE,yBAAA;;;AFAF;EACE,sCAAA;EACA,gBAAA;;;AAGF;EACE,wEAAA;EACA,eAAA;;;AGRF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE,SAAA;EACA,UAAA;EACA,SAAA;EACA,eAAA;EACA,aAAA;EACA,wBAAA;;;AAGF;;;;;;;;;;;EAWE,cAAA;;;AAGF;EACE,cAAA;;;AAGF;;EAEE,gBAAA;;;AAGF;;EAEE,YAAA;;;AAGF;;;;EAIE,WAAA;EACA,aAAA;;;AAGF;EACE,yBAAA;EACA,iBAAA;;;AC/HF;;;EAGE,sBAAA;EACA,iBAAA;;;AAGF;EAEE,yBAAA;EACA,eAAA;;ACmiBE;EDtiBJ;IAKI,eAAA;;;ACiiBA;EDtiBJ;IASI,yBAAA;;;;AAIJ;EAEE,yCAAA;EACA,eAAA;;;AAGF;EACE,cAAA;EACA,aAAA;EACA,qBAAA;;;AAGF;EACE,gBAAA;EACA,YAAA;EACA,cAAA;EACA,eAAA;EACA,aAAA;;;AAGF;EAGE,sBAAA;;AAEA;EACE,UAAA;;;AAQJ;EACE,uCAAA;EACA,WAAA;EAEA,8DAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,UAAA;EACA,WAAA;;;AAGF;EACE;IAEE,0BAAA;;EAEF;IACE,+BAAA;;EAEF;IACE,8BAAA;;EAEF;IACE,8BAAA;;EAEF;IACE,8BAAA;;EAEF;IACE,+BAAA;;EAEF;IACE,6BAAA;;EAEF;IACE,6BAAA;;EAEF;IACE,6BAAA;;EAEF;IACE,+BAAA;;;AAMF;;EACE,qBAAA;EACA,gBAAA;EACA,mBAAA;;;AAIJ;EACE,YAAA;EACA,WAAA;EACA,oBAAA;EACA,kBAAA;EACA,UAAA;;;AAGF;EACE,uBAAA;EACA,kBAAA;EACA,YAAA;EACA,WAAA;EACA,UAAA;EACA,2BAAA;;;AE5HF;EAEE,yBCDc;EDGd,qBAAA;;;AAGF;EACE,kBAAA;EACA,kBAAA;EACA,UAAA;;;AAGF;EAEE,kBAAA;EACA,yBAAA;;;AAGF;EACE,WCpBY;EDqBZ,cAAA;EACA,YAAA;EAEA,qBAAA;;AAEA;EACE,UAAA;EACA,qBAAA;;;AAQJ;EACE,aAAA;EACA,SAAA;EACA,eAAA;EACA,QAAA;EACA,gCAAA;EACA,YAAA;;;AE7BF;EACE,aAAA;EACA,kCAAA;;;AAGF;EACE,aAAA;EACA,sBAAA;EACA,mBAAA;;AAEA;EACE,aAAA;EACA,8BAAA;EACA,mBAAA;;;AAIJ;EACE,kBAAA;EACA,YAAA;EACA,aAAA;EACA,UAAA;EACA,oBAAA;;;ACnCF;EACE,aAAA","file":"main.css","sourceRoot":"..\\styles","sourcesContent":["@import url(\"https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap\");\r\n%display-1 {\r\n  font-family: \"Playfair Display\", serif;\r\n  font-size: 16rem;\r\n}\r\n\r\n%body-1 {\r\n  font-family: \"Franklin Gothic Medium\", \"Arial Narrow\", Arial, sans-serif;\r\n  font-size: 2rem;\r\n}\r\n","%cover {\r\n  height: 100%;\r\n  left: 0;\r\n  object-fit: cover;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n}\r\n\r\n%center {\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n@mixin ratio($height, $width) {\r\n  font-size: 0;\r\n  overflow: hidden;\r\n  position: relative;\r\n\r\n  &:after {\r\n    content: \"\";\r\n    display: inline-block;\r\n    padding-top: $width / $height * 100%;\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n%page {\r\n  @extend %cover;\r\n  z-index: z(\"content\");\r\n\r\n  opacity: 0;\r\n  visibility: hidden;\r\n}\r\n\r\n%page__wrapper {\r\n  color: inherit;\r\n}\r\n\r\n%content {\r\n}\r\n",".dg.ac {\r\n  z-index: 99999 !important;\r\n}\r\n","html,\r\nbody,\r\ndiv,\r\nspan,\r\napplet,\r\nobject,\r\niframe,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6,\r\np,\r\nblockquote,\r\npre,\r\na,\r\nabbr,\r\nacronym,\r\naddress,\r\nbig,\r\ncite,\r\ncode,\r\ndel,\r\ndfn,\r\nem,\r\nimg,\r\nins,\r\nkbd,\r\nq,\r\ns,\r\nsamp,\r\nsmall,\r\nstrike,\r\nstrong,\r\nsub,\r\nsup,\r\ntt,\r\nvar,\r\nb,\r\nu,\r\ni,\r\ncenter,\r\ndl,\r\ndt,\r\ndd,\r\nol,\r\nul,\r\nli,\r\nfieldset,\r\nform,\r\nlabel,\r\nlegend,\r\ntable,\r\ncaption,\r\ntbody,\r\ntfoot,\r\nthead,\r\ntr,\r\nth,\r\ntd,\r\narticle,\r\naside,\r\ncanvas,\r\ndetails,\r\nembed,\r\nfigure,\r\nfigcaption,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmenu,\r\nnav,\r\noutput,\r\nruby,\r\nsection,\r\nsummary,\r\ntime,\r\nmark,\r\naudio,\r\nvideo {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmenu,\r\nnav,\r\nsection {\r\n  display: block;\r\n}\r\n\r\nbody {\r\n  line-height: 1;\r\n}\r\n\r\nol,\r\nul {\r\n  list-style: none;\r\n}\r\n\r\nblockquote,\r\nq {\r\n  quotes: none;\r\n}\r\n\r\nblockquote:before,\r\nblockquote:after,\r\nq:before,\r\nq:after {\r\n  content: \"\";\r\n  content: none;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n","*,\r\n*:after,\r\n*:before {\r\n  box-sizing: border-box;\r\n  user-select: none;\r\n}\r\n\r\nhtml {\r\n  @extend %cover;\r\n  font-size: calc(100vw / 1920) * 10;\r\n  position: fixed;\r\n  @include media(\">desktop\") {\r\n    font-size: 10px;\r\n  }\r\n\r\n  @include media(\"<phone\") {\r\n    font-size: calc(100vw / 750) * 10;\r\n  }\r\n}\r\n\r\nbody {\r\n  @extend %cover;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  position: fixed;\r\n}\r\n\r\na {\r\n  color: inherit;\r\n  outline: none;\r\n  text-decoration: none;\r\n}\r\n\r\nbutton {\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  cursor: pointer;\r\n  outline: none;\r\n}\r\n\r\nimg {\r\n  // opacity: 0;\r\n  // transition: opacity 0.4s ease;\r\n  vertical-align: middle;\r\n\r\n  &.loaded {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.content {\r\n  @extend %cover;\r\n}\r\n\r\n.content::after {\r\n  animation: grain 16s steps(10) infinite;\r\n  content: \"\";\r\n  // background-image: url(\"../images/paper_1_@2X.png\");\r\n  background-image: url(\"../images/textured_paper_@2X.png\");\r\n  height: 300%;\r\n  width: 300%;\r\n  opacity: 0.2;\r\n  position: fixed;\r\n  top: -110%;\r\n  left: -150%;\r\n}\r\n\r\n@keyframes grain {\r\n  0%,\r\n  100% {\r\n    transform: translate(0, 0);\r\n  }\r\n  10% {\r\n    transform: translate(-5%, -10%);\r\n  }\r\n  20% {\r\n    transform: translate(-15%, 5%);\r\n  }\r\n  30% {\r\n    transform: translate(7%, -25%);\r\n  }\r\n  40% {\r\n    transform: translate(-5%, 25%);\r\n  }\r\n  50% {\r\n    transform: translate(-15%, 10%);\r\n  }\r\n  60% {\r\n    transform: translate(15%, 0%);\r\n  }\r\n  70% {\r\n    transform: translate(0%, 15%);\r\n  }\r\n  80% {\r\n    transform: translate(3%, 35%);\r\n  }\r\n  90% {\r\n    transform: translate(-10%, 10%);\r\n  }\r\n}\r\n\r\n[data-animation=\"title\"],\r\n[data-animation=\"paragraph\"] {\r\n  span {\r\n    display: inline-block;\r\n    overflow: hidden;\r\n    vertical-align: top;\r\n  }\r\n}\r\n\r\ncanvas {\r\n  height: 100%;\r\n  width: 100%;\r\n  pointer-events: none;\r\n  position: relative;\r\n  z-index: z(\"canvas\");\r\n}\r\n\r\n.transition-element {\r\n  background-color: wheat;\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 2;\r\n  transform: translateY(100%);\r\n}\r\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n",".home {\r\n  // @extend %cover;\r\n  background-color: $color-hillary;\r\n\r\n  transition: 0.4s ease;\r\n}\r\n\r\n.home__album__titles {\r\n  padding-top: 40rem;\r\n  position: relative;\r\n  z-index: 2;\r\n}\r\n\r\n.home__album__title {\r\n  @extend %display-1;\r\n  margin: 5rem 15rem;\r\n  text-transform: lowercase;\r\n}\r\n\r\n.home__album__title__link {\r\n  color: $color-white;\r\n  display: block;\r\n  opacity: 0.6;\r\n\r\n  transition: 0.4s ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    transition: 0.4s ease;\r\n  }\r\n}\r\n\r\n.home__album__images {\r\n  // position: absolute;\r\n}\r\n\r\n.home__album__media {\r\n  height: 64rem;\r\n  left: 50%;\r\n  position: fixed;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 48rem;\r\n}\r\n\r\n.home__album__image {\r\n  @extend %cover;\r\n}\r\n","$color-white: #fff;\r\n$color-hillary: #aca889;\r\n\r\n$color-black: #000;\r\n\r\n$ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);\r\n\r\n$z-indexes: (\"preloader\", \"navigation\", \"content\", \"canvas\");\r\n",".album {\r\n  @extend %cover;\r\n}\r\n.album__content {\r\n  @extend %body-1;\r\n}\r\nh1.album__content__title {\r\n  @extend %display-1;\r\n}\r\n\r\np.album__content__description {\r\n}\r\n\r\n.album__gallery {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n}\r\n\r\n.album__gallery__column {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  &:nth-of-type(2) {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n}\r\n\r\nfigure.album__gallery__media {\r\n  position: relative;\r\n  width: 40rem;\r\n  height: 60rem;\r\n  z-index: 1;\r\n  margin-bottom: 10rem;\r\n}\r\n\r\nimg.album__gallery__image {\r\n  @extend %cover;\r\n}\r\n",".preloader {\r\n  display: none;\r\n}\r\n"]}